using System.ComponentModel.DataAnnotations;using System.ComponentModel.DataAnnotations.Schema;using System.Diagnostics.Metrics;using System.Reflection.Metadata;using static System.Net.Mime.MediaTypeNames;namespace ReactWithASP.Server.Models{    public class CompanySetting    {        public int Id { get; set; }        public string UserGuid { get; set; }        [Required(ErrorMessage = "Name is required")]        public string Name { get; set; }        [Required(ErrorMessage = "Address is required")]        public string Address { get; set; }        public string PhoneNo { get; set; }        [Required(ErrorMessage = "Email is required")]        [RegularExpression(@"^[^@\s]+@[^@\s]+\.[^@\s]+$", ErrorMessage = "Invalid Email Address")]        public string Email { get; set; }        [Required(ErrorMessage = "Registration Year is required")]        public int Reg_Year { get; set; }    }    public class UpdateCompanyinfo    {        public string UserGuid { get; set; }        [Required(ErrorMessage = "Name is required")]        public string Name { get; set; }        [Required(ErrorMessage = "Address is required")]        public string Address { get; set; }        public string PhoneNo { get; set; }        [Required(ErrorMessage = "Email is required")]        [RegularExpression(@"^[^@\s]+@[^@\s]+\.[^@\s]+$", ErrorMessage = "Invalid Email Address")]        public string Email { get; set; }        [Required(ErrorMessage = "Registration Year is required")]        public int Reg_Year { get; set; }    }    public class SMTPsetting    {        public int Id { get; set; }        public string UserGuid { get; set; }        [Required(ErrorMessage = "Email is required")]        [RegularExpression(@"^[^@\s]+@[^@\s]+\.[^@\s]+$", ErrorMessage = "Invalid Email Address")]        public string Email { get; set; }        [Required(ErrorMessage = "Password is required")]        public string Password { get; set; }        [Required(ErrorMessage = "Host is required")]        public string Host { get; set; }        [Required(ErrorMessage = "Port is required")]        [RegularExpression(@"^\d+$", ErrorMessage = "Invalid Port Number")]        public string Port { get; set; }        public bool Enable_SSl { get; set; }        public bool UserDefaultCredentials { get; set; }        public string MailToCC { get; set; }        public string EmailFrom { get; set; }        public DateTime CreatedOn { get; set; }    }    public class SAVESMTPsetting    {        public int Id { get; set; }        public string UserGuid { get; set; }        [Required(ErrorMessage = "Email is required")]        [RegularExpression(@"^[^@\s]+@[^@\s]+\.[^@\s]+$", ErrorMessage = "Invalid Email Address")]        public string Email { get; set; }        public bool Enable_SSl { get; set; }        public bool UserDefaultCredentials { get; set; }        public string MailToCC { get; set; }        public DateTime CreatedOn { get; set; }    }    public class UpdateSMTPsetting    {        public string UserGuid { get; set; }        [Required(ErrorMessage = "Email is required")]        [RegularExpression(@"^[^@\s]+@[^@\s]+\.[^@\s]+$", ErrorMessage = "Invalid Email Address")]        public string Email { get; set; }        [Required(ErrorMessage = "Password is required")]        public string Password { get; set; }        [Required(ErrorMessage = "Host is required")]        public string Host { get; set; }        [Required(ErrorMessage = "Port is required")]        [RegularExpression(@"^\d+$", ErrorMessage = "Invalid Port Number")]        public string Port { get; set; }        public bool Enable_SSl { get; set; }        public bool UserDefaultCredentials { get; set; }        public string MailToCC { get; set; }    }    public class DeveloperSetting    {        public int Id { get; set; }        public string UserGuid { get; set; }        [Required(ErrorMessage = "WebMasterEmail is required")]        [RegularExpression(@"^[^@\s]+@[^@\s]+\.[^@\s]+$", ErrorMessage = "Invalid Email Address")]        public string WebMasterEmail { get; set; }        [Required(ErrorMessage = "DeveloperEmail is required")]        [RegularExpression(@"^[^@\s]+@[^@\s]+\.[^@\s]+$", ErrorMessage = "Invalid Email Address")]        public string DeveloperEmail { get; set; }        public bool TestMode { get; set; }        public bool CopytoWebmaster { get; set; }        public bool Copytodeveloper { get; set; }    }    public class UpdateDeveloperSetting    {        public string UserGuid { get; set; }        [Required(ErrorMessage = "WebMasterEmail is required")]        [RegularExpression(@"^[^@\s]+@[^@\s]+\.[^@\s]+$", ErrorMessage = "Invalid Email Address")]        public string WebMasterEmail { get; set; }        [Required(ErrorMessage = "DeveloperEmail is required")]        [RegularExpression(@"^[^@\s]+@[^@\s]+\.[^@\s]+$", ErrorMessage = "Invalid Email Address")]        public string DeveloperEmail { get; set; }        public bool TestMode { get; set; }        public bool CopytoWebmaster { get; set; }        public bool Copytodeveloper { get; set; }    }    public class Applicationsetting    {        public int Id { get; set; }        public string UserGuid { get; set; }        [Required(ErrorMessage = "FullName is required")]        public string FullName { get; set; }        public string ApplicationURL { get; set; }        public string APIURL { get; set; }        public string FacebookURL { get; set; }        public string YoutubeURL { get; set; }        public string InstagramURL { get; set; }        public string TwitterURL { get; set; }        public string AdminURL { get; set; }        public string SupervisorURL { get; set; }        public string CompanyURL { get; set; }        public string UserImagesURL { get; set; }        public string WorkerReportImagesURL { get; set; }        public string WorkerDocumentImagesURL { get; set; }    }    public class UpdateApplicationsetting    {        public string UserGuid { get; set; }        [Required(ErrorMessage = "FullName is required")]        public string FullName { get; set; }        public string ApplicationURL { get; set; }        public string APIURL { get; set; }        public string FacebookURL { get; set; }        public string YoutubeURL { get; set; }        public string InstagramURL { get; set; }        public string TwitterURL { get; set; }        public string AdminURL { get; set; }        public string SupervisorURL { get; set; }        public string CompanyURL { get; set; }        public string UserImagesURL { get; set; }        public string WorkerReportImagesURL { get; set; }        public string WorkerDocumentImagesURL { get; set; }    }    public class CurrencyChangeRequest    {        [Required(ErrorMessage = "Amount is required")]        [Range(0.01, double.MaxValue, ErrorMessage = "Amount must be greater than zero")]        public decimal Amount { get; set; }        [Required(ErrorMessage = "Source currency is required")]        [StringLength(3, MinimumLength = 3, ErrorMessage = "Source currency must be a 3-letter ISO code")]        public string SourceCurrency { get; set; }        [Required(ErrorMessage = "Target currency is required")]        [StringLength(3, MinimumLength = 3, ErrorMessage = "Target currency must be a 3-letter ISO code")]        public string TargetCurrency { get; set; }    }    public class PaymentModel    {        public string CardNumber { get; set; }        public long ExpMonth { get; set; }        public long ExpYear { get; set; }        public string Cvc { get; set; }        public long Amount { get; set; }    }    public class UserSettings    {        [Required(ErrorMessage = "UserId Year is required")]        public int UserId { get; set; }    }    public class FirebaseSettings    {        public string ServerKey { get; set; }    }


    //public class SocialMediaAccountSettings
    //{
    //    public int Id { get; set; }
    //    public string SocialMediaId { get; set; }

    //    [StringLength(5, ErrorMessage = "The time limit must be at most 5 characters long.")]
    //    public string TimeLimit { get; set; }

    //    public DateTime CreatedOn { get; set; }

    //    public bool IsImageAllow { get; set; }
    //    public bool IsVedioAllow { get; set; }
    //    public bool IsTextAllow { get; set; }

    //    [StringLength(300, ErrorMessage = "The text size must be at most 300 characters long.")]
    //    public string Text { get; set; } 
    //    public IFormFile? Image { get; set; }
    //    public IFormFile? Video { get; set; }
    //}

    public class SocialMediaAccountSettings    {        public int Id { get; set; }        public int SocialMediaId { get; set; }        public int TimeLimit { get; set; }        public DateTime CreatedOn { get; set; }        public bool IsImageAllow { get; set; }        public bool IsVedioAllow { get; set; }        public bool IsTextAllow { get; set; }        [StringLength(300, ErrorMessage = "The text size must be at most 300 characters long.")]        public string Text { get; set; }

        // Properties for storing file paths
        public string ImagePath { get; set; }        public string VideoPath { get; set; }

        // Properties for uploading files (excluded from database mapping)
        [NotMapped]        public IFormFile Image { get; set; }        [NotMapped]        public IFormFile Video { get; set; }    }    public class SocialMediaAccountSettingsViewModel    {        public int Id { get; set; }        public int SocialMediaId { get; set; }        public int TimeLimit { get; set; }        public bool IsImageAllow { get; set; }        public bool IsVedioAllow { get; set; }        public bool IsTextAllow { get; set; }        [StringLength(300, ErrorMessage = "The text size must be at most 300 characters long.")]        public string Text { get; set; }

        // Properties for uploading files
        public IFormFile Image { get; set; }        public IFormFile Video { get; set; }    }}